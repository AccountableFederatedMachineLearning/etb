/* 
  TODO: Replace the testing ids with actual ids. 
*/
'aggregator':
  Subject: 'OU=client+OU=org1+OU=department1,CN=aggregator'
  Issuer: 'C=US,ST=North Carolina,L=Durham,O=org1.example.com,CN=ca.org1.example.com'
'party0':
  Subject: 'OU=client+OU=org1+OU=department1,CN=party0'
  Issuer: 'C=US,ST=North Carolina,L=Durham,O=org1.example.com,CN=ca.org1.example.com'
'party1':
  Subject: 'OU=client+OU=org1+OU=department1,CN=party1'
  Issuer: 'C=US,ST=North Carolina,L=Durham,O=org1.example.com,CN=ca.org1.example.com'
'party2':
  Subject: 'OU=client+OU=org1+OU=department1,CN=party2'
  Issuer: 'C=US,ST=North Carolina,L=Durham,O=org1.example.com,CN=ca.org1.example.com'

/* Verify that all required actions have happened */
required :- 
  prerequisites,
  received_messages_were_all_sent.

/* Verify that nothing bad has happened by checking that forbidden is not derivable */
forbidden :- message_not_received.
forbidden :- nonsense.

/* Model information */

cls_ref(S) :-
  'aggregator' attests configuration(C),
  json_object_get(C, 'model', Model),
  json_object_get(Model, 'cls_ref', JS),
  json_string_get(JS, S).

model_definition(S) :-
  'aggregator' attests configuration(C),
  json_object_get(C, 'model', Model),
  json_object_get(Model, 'spec', Spec),
  json_object_get(Spec, 'model_definition', JS),
  json_string_get(JS, S).

model_name(S) :-
  'aggregator' attests configuration(C),
  json_object_get(C, 'model', Model),
  json_object_get(Model, 'spec', Spec),
  json_object_get(Spec, 'model_name', JS),
  json_string_get(JS, S).

/* Configuration data */
rounds(N) :- global_param('rounds', S),  int_of_string(S, N).
parties(N) :- global_param('parties', S),  int_of_string(S, N).
max_timeout(N) :- global_param('max_timeout', S),  int_of_string(S, N).
termination_accuracy(A) :- global_param('termination_accuracy', A).

global_param(Name, S) :-
  'aggregator' attests configuration(C),
  json_object_get(C, 'hyperparams', HyperParams),
  json_object_get(HyperParams, 'global', Global),
  json_object_get(Global, Name, S),
  int_of_string(S, N).

/* Message matching: all received messages were sent */

received_messages_were_all_sent :- 
  rounds(N),
  received_messages_were_all_sent_up_to_round(N).

received_messages_were_all_sent_up_to_round(0).
received_messages_were_all_sent_up_to_round(N) :-
  'aggregator' attests received_model_update_hashes(N, Hashes),
  all_sent(Hashes),
  sub(N, 1, I),
  received_messages_were_all_sent_up_to_round(I).

all_sent(Hashes) :- 
  all_sent_i(Hashes, 0).
all_sent_i(Hashes, I) :- 
  json_array_length(Hashes, N), I >= N.
all_sent_i(Hashes, I) :- 
  json_array_get(Hashes, I, H),
  Party attests sent_model_update(H),
  add(I, 1, J),
  all_sent_i(Hashes, J).

/* Messaging problem: A message was not received */

message_not_received :-
  Party attests sent_model_update(U),
  not_received(U).

not_received(U) :-
  rounds(N),
  not_received_after_round(U, N).

not_received_after_round(U, 0) :- U == U.

not_received_after_round(U, N) :-
  'aggregator' attests received_model_update_hashes(N, Hashes),
  not_in(U, Hashes),
  sub(N, 1, I),
  not_received_after_round(U, I).

not_in(U, Hashes) :-
  not_in_i(U, Hashes, 0).
not_in_i(U, Hashes, I) :-
  json_array_length(Hashes, N), 
  I >= N,
  U == U.
not_in_i(U, Hashes, I) :- 
  json_array_get(Hashes, I, Hash),
  U != Hash,
  add(I, 1, J),
  not_in_i(U, Hashes, J).

nonsense :- 'aggregator' attests received_model_update_hashes(Round, Hashes1),
            'aggregator' attests received_model_update_hashes(Round, Hashes2),
            Hashes1 != Hashes2.

prerequisites.

/* Some examples for testing (notice that in the test config all identities are the local identity): */
/*
configuration('{"data": {"cls_ref": "CivitasKerasDataHandler.CivitasKerasDataHandler", "info": {"npz_file": "examples/data/civitas/random/data_party0.npz"}}, "model": {"cls_ref": "ibmfl.model.keras_fl_model.KerasFLModel", "spec": {"model_definition": "examples/configs/civitas_classifier/compiled_civitas_keras.h5", "model_name": "keras-cnn"}}, "fusion": {"cls_ref": "IterAvgFusionHandler"}, "connection": {"cls_ref": "ibmfl.connection.flask_connection.FlaskConnection", "info": {"ip": "127.0.0.1", "port": 8085, "tls_config": {"enable": "False"}}, "sync": "False"}, "protocol_handler": {"cls_ref": "ibmfl.party.party_protocol_handler.PartyProtocolHandler"}, "hyperparams": {"global": {"max_timeout": 600, "parties": 3, "rounds": 3, "termination_accuracy": 0.9}, "local": {"optimizer": {"lr": 0.01}, "training": {"epochs": 3}}}, "aggregator": {"ip": "127.0.0.1", "port": 5000}, "local_training": {"cls_ref": "ibmfl.party.training.local_training_handler.LocalTrainingHandler"}, "evidencia": {"cls_ref": "ibmfl.evidencia.hyperledger_recorder.HyperledgerEvidenceRecorder", "info": {"url": "http://localhost:5001/facts/add"}}}').
received_model_update_hashes(3, '["1b05862adc80c802f37621ebac799ebcd76d7647ff26a5cd15343c25f025f262", "45162f3297daea6c3772a95640170c9f99dbb6e4b774e0702f5c84d9ca545a3a", "1d0eb0436f12d0b769ce90077c60bf40a791d8e97d0c4ad891c558ea166a3ba5"]').
received_model_update_hashes(2, '["1b05862adc80c802f37621ebac799ebcd76d7647ff26a5cd15343c25f025f262", "45162f3297daea6c3772a95640170c9f99dbb6e4b774e0702f5c84d9ca545a3a", "1d0eb0436f12d0b769ce90077c60bf40a791d8e97d0c4ad891c558ea166a3ba5"]').
received_model_update_hashes(1, '["1b05862adc80c802f37621ebac799ebcd76d7647ff26a5cd15343c25f025f262", "45162f3297daea6c3772a95640170c9f99dbb6e4b774e0702f5c84d9ca545a3a", "1d0eb0436f12d0b769ce90077c60bf40a791d8e97d0c4ad891c558ea166a3ba5"]').
sent_model_update('"1b05862adc80c802f37621ebac799ebcd76d7647ff26a5cd15343c25f025f262"').
sent_model_update('"45162f3297daea6c3772a95640170c9f99dbb6e4b774e0702f5c84d9ca545a3a"').
sent_model_update('"1d0eb0436f12d0b769ce90077c60bf40a791d8e97d0c4ad891c558ea166a3ba5"').
*/

goal required.
goal forbidden.
goal rounds(X1).
goal parties(X2).
goal max_timeout(X3).
goal termination_accuracy(X4).
goal cls_ref(X5).
goal model_definition(X6).
goal model_name(X7).
goal configuration(X9).
